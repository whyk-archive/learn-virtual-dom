{"version":3,"sources":["assets/ts/frameworks/view.ts","assets/ts/frameworks/controller.ts","assets/ts/index.ts"],"names":[],"mappings":";AAgMA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GA1KA,SAAgB,EAAG,EAA6B,GAAiC,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,EAAA,GAAA,UAAA,GACxE,MAAA,CAAC,SAAQ,EAAE,WAAU,EAAE,SAAQ,GAyKxC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,cAAA,QAAA,OAAA,EA1KA,QAAA,EAAA,EAIA,IAuCK,EAvCC,EAAc,SAAC,GAAsB,MAAA,MAAM,KAAK,IAEhD,EAAgB,SAAC,EAAqB,GACrC,IAAA,IAAM,KAAQ,EACb,GAAA,EAAY,GAAO,CACf,IAAA,EAAY,EAAK,MAAM,GAC7B,EAAO,iBAAiB,EAAW,EAAW,SAE9C,EAAO,aAAa,EAAM,EAAW,KAKrC,EAAU,SAAC,GAAkC,MAAgB,iBAAT,GAAqC,iBAAT,GAMtF,SAAgB,EAAe,GACzB,IAAC,EAAQ,GAAO,OAAO,SAAS,eAAe,EAAK,YAElD,IAAA,EAAK,SAAS,cAAc,EAAK,UAGhC,OAFP,EAAc,EAAI,EAAK,YACvB,EAAK,SAAS,QAAQ,SAAA,GAAS,OAAA,EAAG,YAAY,EAAc,MACrD,EANT,QAAA,cAAA,EAoBA,SAAK,GACH,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,KAAA,GAAA,OANF,CAAK,IAAA,EAAU,KAcf,IAAM,EAAa,SAAC,EAAmB,GACjC,GAAA,EAAO,KAAmB,EAAA,GAAS,OAAO,EAAW,KACrD,IAAC,EAAQ,IAAY,IAAY,EAAS,OAAO,EAAW,KAC5D,GAAA,EAAQ,IAAY,EAAQ,GAAU,CACpC,GAAA,EAAQ,WAAa,EAAQ,SAAU,OAAO,EAAW,KACzD,GAAA,EAAQ,WAAW,QAAU,EAAQ,WAAW,MAAO,OAAO,EAAW,MAIzE,GAAA,KAAK,UAAU,EAAQ,cAAgB,KAAK,UAAU,EAAQ,YAAa,OAAO,EAAW,KAE5F,OAAA,EAAW,MAQd,EAAmB,SAAC,EAA0B,GAAqB,EAAO,MAAQ,GAQlF,EAAmB,SAAC,EAAqB,EAAsB,GAC9D,IAAA,IAAM,KAAQ,EACZ,EAAY,IAAO,EAAO,gBAAgB,GAE5C,IAAA,IAAM,KAAQ,EACZ,EAAY,IAAO,EAAO,aAAa,EAAM,EAAS,KAW/D,SAAgB,EAAe,EAAqB,EAAmB,EAAmB,GACpF,QADoF,IAAA,IAAA,EAAA,GACnF,EAAD,CAKE,IAAA,EAAS,EAAO,WAAW,GAC7B,GAAC,EAAD,CAgBI,OAXW,EAAW,EAAS,IAYhC,KAAA,EAAW,KACX,KAAA,EAAW,KACX,KAAA,EAAW,KAEd,YADA,EAAO,aAAa,EAAc,GAAU,GAEzC,KAAA,EAAW,MAEd,YADA,EAAiB,EAA6B,EAAkB,WAAW,OAExE,KAAA,EAAW,KAEd,YADA,EAAiB,EAA6B,EAAkB,WAAa,EAAkB,YAI/F,GAAA,EAAQ,IAAY,EAAQ,GAC9B,IAAK,IAAI,EAAI,EAAG,EAAQ,SAAS,OAAS,GAAK,EAAQ,SAAS,OAAS,EAAG,IAC1E,EAAc,EAAuB,EAAQ,SAAS,GAAI,EAAQ,SAAS,GAAI,QA/BjF,EAAO,YAAY,QANnB,EAAO,YAAY,EAAc,IAFrC,QAAA,cAAA;;AChHa,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAVb,IAAA,EAAA,QAAA,UAUA,EAAA,WAUE,SAAA,EAAY,GACL,KAAA,GAA0B,iBAAd,EAAO,GAAkB,SAAS,cAAc,EAAO,IAAM,EAAO,GAChF,KAAA,KAAO,EAAO,KACd,KAAA,MAAQ,EAAO,MACpB,KAAK,QAAU,KAAK,eAAe,EAAO,SACrC,KAAA,cAqDT,OA9CU,EAAA,UAAA,eAAR,SAAuB,GAAvB,IAAA,EAAA,KACQ,EAA+B,GAE1B,EAAA,SAAA,GACH,IAAA,EAAS,EAAQ,GACvB,EAAU,GAAO,SAAC,GAAc,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,EAAA,GAAA,UAAA,GACxB,IAAA,EAAM,EAAM,WAAA,EAAA,EAAA,CAAC,GAAU,IAEtB,OADP,EAAK,cACE,IALN,IAAA,IAAM,KAAO,EAAP,EAAA,GASJ,OAAA,GAMD,EAAA,UAAA,YAAR,WAEO,KAAA,QAAU,KAAK,KAAK,KAAK,MAAO,KAAK,SACrC,KAAA,kBAMC,EAAA,UAAA,eAAR,WACO,KAAK,aACH,KAAA,YAAa,EAClB,WAAW,KAAK,OAAO,KAAK,SAOxB,EAAA,UAAA,OAAR,WACM,KAAK,QACP,EAAA,cAAc,KAAK,GAAmB,KAAK,QAAS,KAAK,SAEpD,KAAA,GAAG,YAAY,EAAA,cAAc,KAAK,UAEpC,KAAA,QAAU,KAAK,QACf,KAAA,YAAa,GAEtB,EApEA,GAAa,QAAA,IAAA;;ACuLb,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjMA,IAAA,EAAA,QAAA,qBAEA,EAAA,QAAA,2BAUM,EAAe,CACnB,MAAO,CACL,mBACA,4BAEF,KAAM,CACJ,MAAO,GACP,UAAU,IAUR,EAAmB,CACvB,SAAQ,SAAC,EAAO,GAGP,OAFF,GAAS,EAAM,OAAS,GAAK,EAAM,OAAS,GAAI,EAAM,KAAK,UAAW,EACtE,EAAM,KAAK,UAAW,GACnB,EAAM,KAAK,UAErB,WAAU,SAAC,EAAO,QAAA,IAAA,IAAA,EAAA,IAChB,EAAM,MAAM,KAAK,GACjB,EAAM,KAAK,MAAQ,IAErB,WAAU,SAAC,EAAO,GAChB,QAAQ,IAAI,CAAC,MAAK,EAAE,MAAK,IACzB,EAAM,MAAM,OAAO,EAAO,KAUxB,EAA6B,SAAC,EAAO,GAgDzC,OAAA,EAAA,EACE,MACA,CACE,MAAO,2BACP,MAAO,kBAET,EAAA,EACE,KACA,CACE,MAAO,QACP,MAAO,wBAET,EAAA,EAAE,IAAK,CAAE,MAAO,6BAChB,yBAEF,EAAA,EACE,OACA,CACE,MAAO,gBACP,MAAO,wBAET,EAAA,EACE,MACA,CACE,MAAO,YACP,MAAO,wBAET,EAAA,EACE,QACA,CACE,MAAO,QACP,IAAK,cAEP,SAEF,EAAA,EAAE,QAAS,CACT,KAAM,OACN,GAAI,aACJ,MAAO,YACP,MAAO,EAAM,KAAK,MAClB,QAAS,SAAC,GACF,IAAA,EAAS,EAAM,OACrB,EAAM,KAAK,MAAQ,EAAO,MAC1B,EAAQ,SAAS,EAAO,EAAO,WAIrC,EAAA,EACE,IACA,CACE,MAAO,oBACP,MAAO,aAAY,EAAM,KAAK,SAAW,UAAY,SAEvD,6CAEF,EAAA,EACE,SACA,CACE,KAAM,SACN,MAAO,qBACP,QAAS,WACH,EAAM,KAAK,UACf,EAAQ,WAAW,EAAO,EAAM,KAAK,SAGzC,WAGJ,EAAA,EAAC,WAAA,EAAA,EAAA,CACC,KACA,CAAE,MAAO,mCACN,EAAM,MAAM,IAAI,SAAC,EAAM,GACjB,OAAA,EAAA,EACL,KACA,CACE,MAAO,OACP,MAAO,wBAET,EACA,EAAA,EACE,SACA,CACE,KAAM,SACN,MAAO,mBACP,MAAO,qBACP,QAAS,WAAM,OAAA,EAAQ,WAAW,EAAO,KAE3C,YAOZ,IAAI,EAAA,IAAoB,CACtB,GAAI,OACJ,MAAK,EACL,KAAI,EACJ,QAAO","file":"ts.f67dd3c1.js","sourceRoot":"../src","sourcesContent":["type NodeType = VNode | string | number\ntype AttributeType = string | EventListener\ntype Attributes = {\n  [attr: string]: AttributeType\n}\n\nexport interface VNode {\n  nodeName: keyof ElementTagNameMap\n  attributes: Attributes\n  children: NodeType[]\n}\n\nexport interface View<State, Actions> {\n  (state: State, actions: Actions): VNode\n}\n\n/**\n * 仮想DOMを作成する\n * @param nodeName Node名\n * @param attributes Node属性\n * @param children Nodeの子要素リスト\n */\nexport function h (nodeName: VNode['nodeName'], attributes: VNode['attributes'], ...children: VNode['children']): VNode {\n  return {nodeName, attributes, children}\n}\n\nconst isEventAttr = (attribute: string) => /^on/.test(attribute)\n\nconst setAttributes = (target: HTMLElement, attributes: Attributes) => {\n  for (const attr in attributes) {\n    if (isEventAttr(attr)) {\n      const eventName = attr.slice(2)\n      target.addEventListener(eventName, attributes[attr] as EventListener)\n    } else {\n      target.setAttribute(attr, attributes[attr] as string)\n    }\n  }\n}\n\nconst isVNode = (node: NodeType): node is VNode => typeof node !== 'string' && typeof node !== 'number'\n\n/**\n * Elementの作成\n * @param node 対象となるElement\n */\nexport function createElement (node: NodeType): HTMLElement | Text {\n  if (!isVNode(node)) return document.createTextNode(node.toString())\n\n  const el = document.createElement(node.nodeName)\n  setAttributes(el, node.attributes)\n  node.children.forEach(child => el.appendChild(createElement(child)))\n  return el\n}\n// export const createElement = (node: NodeType): HTMLElement | Text => {\n//   if (!isVNode(node)) return document.createTextNode(node.toString())\n\n//   const el = document.createElement(node.nodeName)\n//   setAttributes(el, node.attributes)\n//   node.children.forEach(child => el.appendChild(createElement(child)))\n//   return el\n// }\n\n/**\n * 仮想DOMの変更種別\n */\nenum ChangeType {\n  None,\n  Type,\n  Text,\n  Node,\n  Value,\n  Attr\n}\n\n/**\n * 差分検知\n * @param oldNode 古いNode情報\n * @param newNode 新しいNode情報\n */\nconst hasChanged = (oldNode: NodeType, newNode: NodeType): ChangeType => {\n  if (typeof oldNode !== typeof newNode) return ChangeType.Type\n  if (!isVNode(oldNode) && oldNode !== newNode) return ChangeType.Text\n  if (isVNode(oldNode) && isVNode(newNode)) {\n    if (oldNode.nodeName !== newNode.nodeName) return ChangeType.Node\n    if (oldNode.attributes.value !== newNode.attributes.value) return ChangeType.Value\n    /**\n     * \n     */\n    if (JSON.stringify(oldNode.attributes) !== JSON.stringify(newNode.attributes)) return ChangeType.Attr\n  }\n  return ChangeType.None\n}\n\n/**\n * input要素のvalueを更新する\n * @param target 対象のinput要素\n * @param newVal inputのvalueに設定する値\n */\nconst updateInputValue = (target: HTMLInputElement, newVal: string) => { target.value = newVal }\n\n/**\n * 属性の更新\n * @param target 対象のElement\n * @param oldAttrs 古い属性\n * @param newAttrs 新しい属性\n */\nconst updateAttributes = (target: HTMLElement, oldAttrs: Attributes, newAttrs: Attributes) => {\n  for (const attr in oldAttrs) {\n    if (!isEventAttr(attr)) target.removeAttribute(attr)\n  }\n  for (const attr in newAttrs) {\n    if (!isEventAttr(attr)) target.setAttribute(attr, newAttrs[attr] as string)\n  }\n}\n\n/**\n * 仮想DOMの変更を実DOMに反映\n * @param parent 親要素\n * @param oldNode 古いNode情報\n * @param newNode 新しいNode情報\n * @param index 子要素の順番\n */\nexport function updateElement (parent: HTMLElement, oldNode: NodeType, newNode: NodeType, index = 0) {\n  if (!oldNode) {\n    parent.appendChild(createElement(newNode))\n    return\n  }\n\n  const target = parent.childNodes[index]\n  if (!newNode) {\n    parent.removeChild(target)\n    return\n  }\n\n  const changetype = hasChanged(oldNode, newNode)\n  // if ([ChangeType.Type, ChangeType.Text, ChangeType.Node].includes(changetype)) {\n  //   parent.replaceChild(createElement(newNode), target)\n  //   return\n  // } else if (changetype === ChangeType.Value) {\n  //   updateInputValue(target as HTMLInputElement, (newNode as VNode).attributes.value as string)\n  //   return\n  // } else if (changetype === ChangeType.Attr) {\n  //   updateAttributes(target as HTMLInputElement, (oldNode as VNode).attributes, (newNode as VNode).attributes)\n  //   return\n  // }\n  switch (changetype) {\n    case ChangeType.Type:\n    case ChangeType.Text:\n    case ChangeType.Node:\n      parent.replaceChild(createElement(newNode), target)\n      return\n    case ChangeType.Value:\n      updateInputValue(target as HTMLInputElement, (newNode as VNode).attributes.value as string)\n      return\n    case ChangeType.Attr:\n      updateAttributes(target as HTMLInputElement, (oldNode as VNode).attributes, (newNode as VNode).attributes)\n      return\n  }\n\n  if (isVNode(oldNode) && isVNode(newNode))\n    for (let i = 0; newNode.children.length > i || oldNode.children.length > i; i++) {\n      updateElement(target as HTMLElement, oldNode.children[i], newNode.children[i], i)\n    }\n}\n// export const updateElement = (parent: HTMLElement, oldNode: NodeType, newNode: NodeType, index = 0) => {\n//   if (!oldNode) {\n//     parent.appendChild(createElement(newNode))\n//     return\n//   }\n\n//   const target = parent.childNodes[index]\n//   if (!newNode) {\n//     parent.removeChild(target)\n//     return\n//   }\n\n//   const changetype = hasChanged(oldNode, newNode)\n//   if ([ChangeType.Type, ChangeType.Text, ChangeType.Node].includes(changetype)) {\n//     parent.replaceChild(createElement(newNode), target)\n//     return\n//   } else if (changetype === ChangeType.Value) {\n//     updateInputValue(target as HTMLInputElement, (newNode as VNode).attributes.value as string)\n//     return\n//   } else if (changetype === ChangeType.Attr) {\n//     updateAttributes(target as HTMLInputElement, (oldNode as VNode).attributes, (newNode as VNode).attributes)\n//     return\n//   }\n\n//   if (isVNode(oldNode) && isVNode(newNode))\n//     for (let i = 0; newNode.children.length > i || oldNode.children.length > i; i++) {\n//       updateElement(target as HTMLElement, oldNode.children[i], newNode.children[i], i)\n//     }\n// }","import { View, VNode, createElement, updateElement } from './view';\nimport { ActionTree } from './actions';\n\ninterface AppConstructor<State, Actions extends ActionTree<State>> {\n  el: Element | string\n  view: View<State, Actions>\n  state: State,\n  actions: Actions\n}\n\nexport class App<State, Actions extends ActionTree<State>> {\n  private readonly el: Element\n  private readonly view: AppConstructor<State, Actions>['view']\n  private readonly state: AppConstructor<State, Actions>['state']\n  private readonly actions: AppConstructor<State, Actions>['actions']\n\n  private oldNode: VNode\n  private newNode: VNode\n  private skipRender: boolean\n\n  constructor(params: AppConstructor<State, Actions>) {\n    this.el = typeof params.el === 'string' ? document.querySelector(params.el) : params.el\n    this.view = params.view\n    this.state = params.state,\n    this.actions = this.dispatchAction(params.actions)\n    this.resolveNode()\n  }\n\n  /**\n   * ユーザーが定義したActionsに仮想DOMを再構築するためのフックを仕込む\n   * @param actions\n   */\n  private dispatchAction(actions: Actions) {\n    const dispatchd: ActionTree<State> = {}\n\n    for (const key in actions) {\n      const action = actions[key]\n      dispatchd[key] = (state: State, ...data: any) => {\n        const ret = action(state, ...data)\n        this.resolveNode()\n        return ret\n      }\n    }\n\n    return dispatchd as Actions\n  }\n\n  /**\n   * 仮想DOMを構築\n   */\n  private resolveNode() {\n    // 仮想DOM再構築\n    this.newNode = this.view(this.state, this.actions)\n    this.scheduleRender()\n  }\n\n  /**\n   * renderのスケジューリング\n   */\n  private scheduleRender() {\n    if (!this.skipRender) {\n      this.skipRender = true\n      setTimeout(this.render.bind(this));\n    }\n  }\n\n  /**\n   * 実DOMに反映\n   */\n  private render() {\n    if (this.oldNode) {\n      updateElement(this.el as HTMLElement, this.oldNode, this.newNode)\n    } else {\n      this.el.appendChild(createElement(this.newNode))\n    }\n    this.oldNode = this.newNode\n    this.skipRender = false\n  }\n}","import { h, View } from './frameworks/view';\nimport { ActionTree } from './frameworks/actions';\nimport { App } from './frameworks/controller';\n\ninterface State {\n  tasks: string[]\n  form: {\n    title: string,\n    hasError: boolean\n  }\n}\n\nconst state: State = {\n  tasks: [\n    'Learn about VDOM',\n    'Welcome to Simple VDOM!!'\n  ],\n  form: {\n    title: '',\n    hasError: false\n  }\n}\n\ninterface Actions extends ActionTree<State> {\n  validate: (state: State, title: string) => boolean\n  createTask: (state: State, title: string) => void\n  removeTask: (state: State, index: number) => void\n}\n\nconst actions: Actions = {\n  validate(state, title) {\n    if (!title || title.length < 3 || title.length > 20) state.form.hasError = true\n    else state.form.hasError = false\n    return !state.form.hasError\n  },\n  createTask(state, title = '') {\n    state.tasks.push(title)\n    state.form.title = ''\n  },\n  removeTask(state, index) {\n    console.log({state, index});\n    state.tasks.splice(index, 1)\n  }\n}\n\n// const oninput = (e: Event) => {\n//   const target = e.target as HTMLInputElement\n//   state.form.title = target.value\n//   actions.validate(state, target.value)\n// }\n\nconst view: View<State, Actions> = (state, actions) => \n  // <div class=\"nes-container is-rounded\">\n  //   <h1 class=\"title\">Virtual DOM TODO App</h1>\n\n  //   <form class=\"nes-container\">\n  //     <div class=\"nes-field\">\n  //       <label for=\"task-title\">Title</label>\n\n  //       <input\n  //         type=\"text\"\n  //         class=\"nes-input\"\n  //         value={state.form.title}\n  //         onInput={() => {/** タイトルのチェック */}}\n  //         />\n\n  //       <p\n  //         class=\"nes-text is-error\"\n  //         style={{ display: state.form.hasError ? 'block' : 'none' }}>\n  //         Enter a value between 3 and 20 characters\n  //       </p>\n\n  //       <button\n  //         type=\"button\"\n  //         class=\"nes-btn is-primary\"\n  //         onClick={() => {/* 登録処理 */}}\n  //         >\n  //         Create\n  //       </button>\n  //     </div>\n  //   </form>\n\n  //   <ul class=\"nes-list is-disc nes-container\">\n  //     {\n  //       state.tasks.map((task) => {\n  //         return <li class=\"item\">\n  //           {task}\n  //           <button\n  //             type=\"button\"\n  //             class=\"nes-btn is-error\"\n  //             onClick={() => {/** 削除処理 */}}>\n  //             ×\n  //           </button>\n  //         </li>\n  //       })\n  //     }\n  //   </ul>\n  // </div>\n\n  h(\n    'div', \n    { \n      class: 'nes-container is-rounded',\n      style: 'padding: 2rem;'\n    },\n    h(\n      'h1',\n      {\n        class: 'title',\n        style: 'margin-bottom: 2rem;'\n      },\n      h('i', { class: 'nes-icon heart is-medium' }),\n      'Virtual DOM TODO App '\n    ),\n    h(\n      'form',\n      {\n        class: 'nes-container',\n        style: 'margin-bottom: 2rem;'\n      },\n      h(\n        'div',\n        {\n          class: 'nes-field',\n          style: 'margin-bottom: 1rem;',\n        },\n        h(\n          'label',\n          {\n            class: 'label',\n            for: 'task-title'\n          },\n          'Title'\n        ),\n        h('input', {\n          type: 'text',\n          id: 'task-title',\n          class: 'nes-input',\n          value: state.form.title,\n          oninput: (event: Event) => {\n            const target = event.target as HTMLInputElement\n            state.form.title = target.value\n            actions.validate(state, target.value)\n          }\n        }),\n      ),\n      h(\n        'p',\n        {\n          class: 'nes-text is-error',\n          style: `display: ${state.form.hasError ? 'display' : 'none'}`,\n        },\n        'Enter a value between 3 and 20 characters'\n      ),\n      h(\n        'button',\n        {\n          type: 'button',\n          class: 'nes-btn is-primary',\n          onclick: () => {\n            if (state.form.hasError) return\n            actions.createTask(state, state.form.title)\n          }\n        },\n        'Create'\n      )\n    ),\n    h(\n      'ul',\n      { class: 'nes-list is-disc nes-container' },\n      ...state.tasks.map((task, i) => {\n        return h(\n          'li',\n          {\n            class: 'item',\n            style: 'margin-bottom: 1rem;'\n          },\n          task,\n          h(\n            'button',\n            {\n              type: 'button',\n              class: 'nes-btn is-error',\n              style: 'margin-left: 1rem;',\n              onclick: () => actions.removeTask(state, i)\n            },\n            '×'\n          )\n        )\n      })\n    )\n  )\n\nnew App<State, Actions>({\n  el: '#app',\n  state,\n  view,\n  actions\n})"]}